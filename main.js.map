{"version":3,"file":"main.js","mappings":"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","sources":["webpack:///./src/js/igt.js","webpack:///./src/js/mission-calc.js","webpack:///./src/js/index.js"],"sourcesContent":["\nexport default class InGameTime {\n  #ingameTimeEl\n  #ingameTimeElId\n\n  GAME_CLOCK = 48 * 60 // 48 minutes in seconds\n  GAME_OFFSET = -0.05 // in seconds\n\n  #updater\n\n  constructor (igtElId) {\n    this.#ingameTimeElId = igtElId\n  }\n\n  get inGameTimeEl () {\n    if (this.#ingameTimeEl === undefined) {\n      this.#ingameTimeEl = document.getElementById(this.#ingameTimeElId)\n    }\n    return this.#ingameTimeEl\n  }\n\n  get sinceMidnight () {\n    const now = new Date()\n    const midnight = new Date(now)\n    midnight.setHours(0)\n    midnight.setMinutes(0)\n    midnight.setSeconds(0)\n    return (now.getTime() - midnight.getTime()) / 1000\n  }\n\n  leftPadZero (number) {\n    return `0${number}`.slice(-2)\n  }\n\n  renderTime (hours, minutes) {\n    const hourPrepend = this.leftPadZero(hours)\n    const minutePrepend = this.leftPadZero(minutes)\n    return `${hourPrepend}:${minutePrepend}`\n  }\n\n  get inGameTimeProgress () {\n    return this.sinceMidnight % this.GAME_CLOCK\n  }\n\n  get inGameTimeDecimal () {\n    return this.inGameTimeProgress / (this.GAME_CLOCK / 24)\n  }\n\n  get inGameTime () {\n    const inGameTimeDecimal = this.inGameTimeDecimal + this.GAME_OFFSET // I think the offset is actually a factor of rounding\n    const inGameHours = Math.floor(inGameTimeDecimal)\n    const inGameMinutes = Math.round((inGameTimeDecimal % 1) * 60)\n\n    return this.renderTime(inGameHours, inGameMinutes)\n  }\n\n  run () {\n    this.inGameTimeEl.value = this.inGameTime\n  }\n\n  start () {\n    if (this.inGameTimeEl) {\n      this.run()\n      if (this.#updater === undefined) {\n        this.#updater = setInterval(this.run.bind(this), 250)\n      }\n    }\n  }\n\n  stop () {\n    clearInterval(this.#updater)\n    this.#updater = undefined\n  }\n}\n","\nexport default class MissionCalc {\n  #missionCalcFormElId\n  #missionCalcFormEl\n\n  #creditResultFieldId\n  #creditResultFieldEl\n\n  #rpResultFieldId\n  #rpResultFieldEl\n\n  constructor (missionCalcFormElId, creditResultFieldId, rpResultFieldId) {\n    this.#missionCalcFormElId = missionCalcFormElId\n    this.#creditResultFieldId = creditResultFieldId\n    this.#rpResultFieldId = rpResultFieldId\n  }\n\n  get missionCalcFormEl () {\n    if (this.#missionCalcFormEl === undefined) {\n      this.#missionCalcFormEl = document.getElementById(this.#missionCalcFormElId)\n    }\n    return this.#missionCalcFormEl\n  }\n\n  get creditResultFieldEl () {\n    if (this.#creditResultFieldEl === undefined) {\n      this.#creditResultFieldEl = document.getElementById(this.#creditResultFieldId)\n    }\n    return this.#creditResultFieldEl\n  }\n\n  get rpResultFieldEl () {\n    if (this.#rpResultFieldEl === undefined) {\n      this.#rpResultFieldEl = document.getElementById(this.#rpResultFieldId)\n    }\n    return this.#rpResultFieldEl\n  }\n\n  changeListener () {\n    this.missionCalcFormEl.querySelectorAll('input').forEach((input) => input.addEventListener('change', this.formChanged.bind(this)))\n  }\n\n  submitListener () {\n    this.missionCalcFormEl.addEventListener('submit', (e) => e.preventDefault())\n  }\n\n  setup () {\n    this.changeListener()\n    this.submitListener()\n    this.calcCredit(this.missionCalcFormEl)\n  }\n\n  formChanged (e) {\n    this.calcCredit(e.target.form)\n  }\n\n  calcCredit (formEl) {\n    const resetEstimatedTime = formEl.reset_time.value * formEl.retry_rate.value\n    let resetTime = resetEstimatedTime\n    if (resetEstimatedTime < formEl.cool_down.value) {\n      resetTime = formEl.cool_down.value\n    }\n\n    const inMissionTime = formEl.time_taken.value * formEl.retry_rate.value\n    const totalTime = inMissionTime + resetTime\n    console.log('Time taken:', totalTime)\n\n    const ratio = totalTime / 60\n\n    const creditsPerHour = formEl.credit.value / ratio\n\n    this.creditResultFieldEl.value = parseInt(creditsPerHour).toLocaleString()\n  }\n\n  calcRP (formEl) {\n    const resetEstimatedTime = formEl.reset_time.value * formEl.retry_rate.value\n    let resetTime = resetEstimatedTime\n    if (resetEstimatedTime < formEl.cool_down.value) {\n      resetTime = formEl.cool_down.value\n    }\n\n    const inMissionTime = formEl.time_taken.value * formEl.retry_rate.value\n    const totalTime = inMissionTime + resetTime\n    console.log('Time taken:', totalTime)\n\n    const ratio = totalTime / 60\n\n    const rpPerHour = formEl.rp.value / ratio\n\n    this.rpResultFieldEl.value = parseInt(rpPerHour).toLocaleString()\n  }\n}\n","import InGameTime from './igt.js'\nimport MissionCalc from './mission-calc.js';\n\n(function () {\n  const ingameTime = new InGameTime('ingame-time')\n  ingameTime.start()\n\n  const missionCalc = new MissionCalc('calc', 'credit_result', 'rp_result')\n  missionCalc.setup()\n})()\n"],"names":["InGameTime","GAME_CLOCK","GAME_OFFSET","constructor","igtElId","this","inGameTimeEl","undefined","document","getElementById","sinceMidnight","now","Date","midnight","setHours","setMinutes","setSeconds","getTime","leftPadZero","number","slice","renderTime","hours","minutes","inGameTimeProgress","inGameTimeDecimal","inGameTime","inGameHours","Math","floor","inGameMinutes","round","run","value","start","setInterval","bind","stop","clearInterval","MissionCalc","missionCalcFormElId","creditResultFieldId","rpResultFieldId","missionCalcFormEl","creditResultFieldEl","rpResultFieldEl","changeListener","querySelectorAll","forEach","input","addEventListener","formChanged","submitListener","e","preventDefault","setup","calcCredit","target","form","formEl","resetEstimatedTime","reset_time","retry_rate","resetTime","cool_down","totalTime","time_taken","console","log","ratio","creditsPerHour","credit","parseInt","toLocaleString","calcRP","rpPerHour","rp"],"sourceRoot":""}