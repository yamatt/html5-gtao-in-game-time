{"version":3,"file":"main.js","mappings":"mBACe,MAAMA,EACnB,GACA,GAEAC,WAAa,KACbC,aAAe,IAEf,GAEAC,YAAaC,GACXC,MAAK,EAAkBD,CACzB,CAEIE,mBAIF,YAH2BC,IAAvBF,MAAK,IACPA,MAAK,EAAgBG,SAASC,eAAeJ,MAAK,IAE7CA,MAAK,CACd,CAEIK,oBACF,MAAMC,EAAM,IAAIC,KACVC,EAAW,IAAID,KAAKD,GAI1B,OAHAE,EAASC,SAAS,GAClBD,EAASE,WAAW,GACpBF,EAASG,WAAW,IACZL,EAAIM,UAAYJ,EAASI,WAAa,GAChD,CAEAC,YAAaC,GACX,MAAO,IAAIA,IAASC,OAAO,EAC7B,CAEAC,WAAYC,EAAOC,GAGjB,MAAO,GAFalB,KAAKa,YAAYI,MACfjB,KAAKa,YAAYK,IAEzC,CAEIC,yBACF,OAAOnB,KAAKK,cAAgBL,KAAKJ,UACnC,CAEIwB,wBACF,OAAOpB,KAAKmB,oBAAsBnB,KAAKJ,WAAa,GACtD,CAEIyB,iBACF,MAAMD,EAAoBpB,KAAKoB,kBAAoBpB,KAAKH,YAClDyB,EAAcC,KAAKC,MAAMJ,GACzBK,EAAgBF,KAAKG,MAAON,EAAoB,EAAK,IAE3D,OAAOpB,KAAKgB,WAAWM,EAAaG,EACtC,CAEAE,MACE3B,KAAKC,aAAa2B,MAAQ5B,KAAKqB,UACjC,CAEAQ,QACM7B,KAAKC,eACPD,KAAK2B,WACiBzB,IAAlBF,MAAK,IACPA,MAAK,EAAW8B,YAAY9B,KAAK2B,IAAII,KAAK/B,MAAO,MAGvD,CAEAgC,OACEC,cAAcjC,MAAK,GACnBA,MAAK,OAAWE,CAClB,ECvEa,MAAMgC,EACnB,GACA,GAEA,GACA,GAEApC,YAAaqC,EAAqBC,GAChCpC,MAAK,EAAuBmC,EAC5BnC,MAAK,EAAiBoC,CACxB,CAEIC,wBAIF,YAHgCnC,IAA5BF,MAAK,IACPA,MAAK,EAAqBG,SAASC,eAAeJ,MAAK,IAElDA,MAAK,CACd,CAEIsC,oBAIF,YAH4BpC,IAAxBF,MAAK,IACPA,MAAK,EAAiBG,SAASC,eAAeJ,MAAK,IAE9CA,MAAK,CACd,CAEAuC,iBACEvC,KAAKqC,kBAAkBG,iBAAiB,SAASC,SAASC,GAAUA,EAAMC,iBAAiB,SAAU3C,KAAK4C,OAC5G,CAEAC,iBACE7C,KAAKqC,kBAAkBM,iBAAiB,UAAWG,GAAMA,EAAEC,kBAC7D,CAEAC,QACEhD,KAAKuC,iBACLvC,KAAK6C,iBACL7C,KAAK4C,MACP,CAEAA,OACE5C,KAAKsC,cAAcV,MAAQ,OAC7B,ECvCmB,IAAIjC,EAAW,eACvBkC,QAES,IAAIK,EAAY,OAAQ,UAChCc,O","sources":["webpack:///./src/js/igt.js","webpack:///./src/js/mission-calc.js","webpack:///./src/js/index.js"],"sourcesContent":["\nexport default class InGameTime {\n  #ingameTimeEl\n  #ingameTimeElId\n\n  GAME_CLOCK = 48 * 60 // 48 minutes in seconds\n  GAME_OFFSET = -0.05 // in seconds\n\n  #updater\n\n  constructor (igtElId) {\n    this.#ingameTimeElId = igtElId\n  }\n\n  get inGameTimeEl () {\n    if (this.#ingameTimeEl === undefined) {\n      this.#ingameTimeEl = document.getElementById(this.#ingameTimeElId)\n    }\n    return this.#ingameTimeEl\n  }\n\n  get sinceMidnight () {\n    const now = new Date()\n    const midnight = new Date(now)\n    midnight.setHours(0)\n    midnight.setMinutes(0)\n    midnight.setSeconds(0)\n    return (now.getTime() - midnight.getTime()) / 1000\n  }\n\n  leftPadZero (number) {\n    return `0${number}`.slice(-2)\n  }\n\n  renderTime (hours, minutes) {\n    const hourPrepend = this.leftPadZero(hours)\n    const minutePrepend = this.leftPadZero(minutes)\n    return `${hourPrepend}:${minutePrepend}`\n  }\n\n  get inGameTimeProgress () {\n    return this.sinceMidnight % this.GAME_CLOCK\n  }\n\n  get inGameTimeDecimal () {\n    return this.inGameTimeProgress / (this.GAME_CLOCK / 24)\n  }\n\n  get inGameTime () {\n    const inGameTimeDecimal = this.inGameTimeDecimal + this.GAME_OFFSET // I think the offset is actually a factor of rounding\n    const inGameHours = Math.floor(inGameTimeDecimal)\n    const inGameMinutes = Math.round((inGameTimeDecimal % 1) * 60)\n\n    return this.renderTime(inGameHours, inGameMinutes)\n  }\n\n  run () {\n    this.inGameTimeEl.value = this.inGameTime\n  }\n\n  start () {\n    if (this.inGameTimeEl) {\n      this.run()\n      if (this.#updater === undefined) {\n        this.#updater = setInterval(this.run.bind(this), 250)\n      }\n    }\n  }\n\n  stop () {\n    clearInterval(this.#updater)\n    this.#updater = undefined\n  }\n}\n","\nexport default class MissionCalc {\n  #missionCalcFormElId\n  #missionCalcFormEl\n\n  #resultFieldId\n  #resultFieldEl\n\n  constructor (missionCalcFormElId, resultFieldId) {\n    this.#missionCalcFormElId = missionCalcFormElId\n    this.#resultFieldId = resultFieldId\n  }\n\n  get missionCalcFormEl () {\n    if (this.#missionCalcFormEl === undefined) {\n      this.#missionCalcFormEl = document.getElementById(this.#missionCalcFormElId)\n    }\n    return this.#missionCalcFormEl\n  }\n\n  get resultFieldEl () {\n    if (this.#resultFieldEl === undefined) {\n      this.#resultFieldEl = document.getElementById(this.#resultFieldId)\n    }\n    return this.#resultFieldEl\n  }\n\n  changeListener () {\n    this.missionCalcFormEl.querySelectorAll('input').forEach((input) => input.addEventListener('change', this.calc))\n  }\n\n  submitListener () {\n    this.missionCalcFormEl.addEventListener('submit', (e) => e.preventDefault())\n  }\n\n  setup () {\n    this.changeListener()\n    this.submitListener()\n    this.calc()\n  }\n\n  calc () {\n    this.resultFieldEl.value = 'Hello'\n  }\n}\n","import InGameTime from './igt.js'\nimport MissionCalc from './mission-calc.js';\n\n(function () {\n  const ingameTime = new InGameTime('ingame-time')\n  ingameTime.start()\n\n  const missionCalc = new MissionCalc('calc', 'result')\n  missionCalc.setup()\n})()\n"],"names":["InGameTime","GAME_CLOCK","GAME_OFFSET","constructor","igtElId","this","inGameTimeEl","undefined","document","getElementById","sinceMidnight","now","Date","midnight","setHours","setMinutes","setSeconds","getTime","leftPadZero","number","slice","renderTime","hours","minutes","inGameTimeProgress","inGameTimeDecimal","inGameTime","inGameHours","Math","floor","inGameMinutes","round","run","value","start","setInterval","bind","stop","clearInterval","MissionCalc","missionCalcFormElId","resultFieldId","missionCalcFormEl","resultFieldEl","changeListener","querySelectorAll","forEach","input","addEventListener","calc","submitListener","e","preventDefault","setup"],"sourceRoot":""}