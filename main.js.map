{"version":3,"file":"main.js","mappings":"oBAGsB,ICFP,MACbA,kBAAoB,cAEpB,GAEAC,WAAa,KACbC,aAAe,IAEf,GAEIC,mBAIF,OAHoBC,MAAhBC,iBACFC,MAAK,EAAkBC,SAASC,eAAeF,KAAKN,oBAE/CM,MAAK,CACd,CAEIG,oBACF,MAAMC,EAAM,IAAIC,KACVC,EAAW,IAAID,KAAKD,GAI1B,OAHAE,EAASC,SAAS,GAClBD,EAASE,WAAW,GACpBF,EAASG,WAAW,IACZL,EAAIM,UAAYJ,EAASI,WAAW,GAC9C,CAEAC,YAAYC,GACV,MAAO,IAAIA,IAASC,OAAO,EAC7B,CAEAC,WAAWC,EAAOC,GAGhB,MAAO,GAFahB,KAAKW,YAAYI,MACff,KAAKW,YAAYK,IAEzC,CAEIC,yBACF,OAAOjB,KAAKG,cAAgBH,KAAKL,UACnC,CAEIuB,wBACF,OAAOlB,KAAKiB,oBAAsBjB,KAAKL,WAAa,GACtD,CAEIwB,iBACF,MAAMD,EAAoBlB,KAAKkB,kBAAoBlB,KAAKJ,YAClDwB,EAAcC,KAAKC,MAAMJ,GACzBK,EAAgBF,KAAKG,MAAON,EAAoB,EAAK,IAE3D,OAAOlB,KAAKc,WAAWM,EAAaG,EACtC,CAEAE,MACEzB,KAAKH,aAAa6B,MAAQ1B,KAAKmB,UACjC,CAEAQ,QACuB7B,MAAjBE,MAAK,IACPA,MAAK,EAAW4B,YAAY5B,KAAKyB,IAAK,KAE1C,CAEAI,OACEC,cAAc9B,MAAK,GACnBA,MAAK,OAAWF,CAClB,ID9DY6B,O","sources":["webpack:///./src/js/index.js","webpack:///./src/js/igt.js"],"sourcesContent":["import InGameTime from \"./igt.js\";\n\n(function () {\n  const ingame_time = new InGameTime();\n  ingame_time.start();\n})();\n","\nexport default class InGameTime {\n  INGAME_TIME_EL_ID = \"ingame-time\";\n\n  #ingame_time_el;\n\n  GAME_CLOCK = 48 * 60; // 48 minutes in seconds\n  GAME_OFFSET = -0.05; // in seconds\n\n  #updater;\n\n  get inGameTimeEl() {\n    if (ingame_time_el==undefined) {\n      this.#ingame_time_el = document.getElementById(this.INGAME_TIME_EL_ID);\n    }\n    return this.#ingame_time_el;\n  }\n\n  get sinceMidnight() {\n    const now = new Date();\n    const midnight = new Date(now);\n    midnight.setHours(0)\n    midnight.setMinutes(0)\n    midnight.setSeconds(0)\n    return (now.getTime() - midnight.getTime())/1000;\n  }\n\n  leftPadZero(number) {\n    return `0${number}`.slice(-2)\n  }\n\n  renderTime(hours, minutes) {\n    const hourPrepend = this.leftPadZero(hours);\n    const minutePrepend = this.leftPadZero(minutes);\n    return `${hourPrepend}:${minutePrepend}`\n  }\n\n  get inGameTimeProgress() {\n    return this.sinceMidnight % this.GAME_CLOCK;\n  }\n\n  get inGameTimeDecimal() {\n    return this.inGameTimeProgress / (this.GAME_CLOCK / 24);\n  }\n\n  get inGameTime() {\n    const inGameTimeDecimal = this.inGameTimeDecimal + this.GAME_OFFSET; // I think the offset is actually a factor of rounding\n    const inGameHours = Math.floor(inGameTimeDecimal)\n    const inGameMinutes = Math.round((inGameTimeDecimal % 1) * 60);\n\n    return this.renderTime(inGameHours, inGameMinutes);\n  }\n\n  run() {\n    this.inGameTimeEl.value = this.inGameTime;\n  }\n\n  start() {\n    if (this.#updater == undefined) {\n      this.#updater = setInterval(this.run, 1000);\n    }\n  }\n\n  stop() {\n    clearInterval(this.#updater);\n    this.#updater = undefined;\n  }\n}\n"],"names":["INGAME_TIME_EL_ID","GAME_CLOCK","GAME_OFFSET","inGameTimeEl","undefined","ingame_time_el","this","document","getElementById","sinceMidnight","now","Date","midnight","setHours","setMinutes","setSeconds","getTime","leftPadZero","number","slice","renderTime","hours","minutes","inGameTimeProgress","inGameTimeDecimal","inGameTime","inGameHours","Math","floor","inGameMinutes","round","run","value","start","setInterval","stop","clearInterval"],"sourceRoot":""}