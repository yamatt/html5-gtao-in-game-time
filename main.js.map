{"version":3,"file":"main.js","mappings":"mBAGsB,ICFP,MACb,GACA,GAEAA,WAAa,KACbC,aAAe,IAEf,GAEAC,YAAaC,GACXC,MAAK,EAAqBD,CAC5B,CAEIE,mBAIF,YAH6BC,IAAzBF,MAAK,IACPA,MAAK,EAAkBG,SAASC,eAAeJ,MAAK,IAE/CA,MAAK,CACd,CAEIK,oBACF,MAAMC,EAAM,IAAIC,KACVC,EAAW,IAAID,KAAKD,GAI1B,OAHAE,EAASC,SAAS,GAClBD,EAASE,WAAW,GACpBF,EAASG,WAAW,IACZL,EAAIM,UAAYJ,EAASI,WAAW,GAC9C,CAEAC,YAAYC,GACV,MAAO,IAAIA,IAASC,OAAO,EAC7B,CAEAC,WAAWC,EAAOC,GAGhB,MAAO,GAFalB,KAAKa,YAAYI,MACfjB,KAAKa,YAAYK,IAEzC,CAEIC,yBACF,OAAOnB,KAAKK,cAAgBL,KAAKJ,UACnC,CAEIwB,wBACF,OAAOpB,KAAKmB,oBAAsBnB,KAAKJ,WAAa,GACtD,CAEIyB,iBACF,MAAMD,EAAoBpB,KAAKoB,kBAAoBpB,KAAKH,YAClDyB,EAAcC,KAAKC,MAAMJ,GACzBK,EAAgBF,KAAKG,MAAON,EAAoB,EAAK,IAE3D,OAAOpB,KAAKgB,WAAWM,EAAaG,EACtC,CAEAE,MACE3B,KAAKC,aAAa2B,MAAQ5B,KAAKqB,UACjC,CAEAQ,QACE7B,KAAK2B,WACiBzB,IAAlBF,MAAK,IACPA,MAAK,EAAW8B,YAAY9B,KAAK2B,IAAII,KAAK/B,MAAO,KAErD,CAEAgC,OACEC,cAAcjC,MAAK,GACnBA,MAAK,OAAWE,CAClB,GDnEmC,eACvB2B,O","sources":["webpack:///./src/js/index.js","webpack:///./src/js/igt.js"],"sourcesContent":["import InGameTime from \"./igt.js\";\n\n(function () {\n  const ingame_time = new InGameTime('ingame-time');\n  ingame_time.start();\n})();\n","\nexport default class InGameTime {\n  #ingame_time_el;\n  #ingame_time_el_id;\n\n  GAME_CLOCK = 48 * 60; // 48 minutes in seconds\n  GAME_OFFSET = -0.05; // in seconds\n\n  #updater;\n\n  constructor (igt_el_id) {\n    this.#ingame_time_el_id = igt_el_id;\n  }\n\n  get inGameTimeEl() {\n    if (this.#ingame_time_el === undefined) {\n      this.#ingame_time_el = document.getElementById(this.#ingame_time_el_id);\n    }\n    return this.#ingame_time_el;\n  }\n\n  get sinceMidnight() {\n    const now = new Date();\n    const midnight = new Date(now);\n    midnight.setHours(0)\n    midnight.setMinutes(0)\n    midnight.setSeconds(0)\n    return (now.getTime() - midnight.getTime())/1000;\n  }\n\n  leftPadZero(number) {\n    return `0${number}`.slice(-2)\n  }\n\n  renderTime(hours, minutes) {\n    const hourPrepend = this.leftPadZero(hours);\n    const minutePrepend = this.leftPadZero(minutes);\n    return `${hourPrepend}:${minutePrepend}`\n  }\n\n  get inGameTimeProgress() {\n    return this.sinceMidnight % this.GAME_CLOCK;\n  }\n\n  get inGameTimeDecimal() {\n    return this.inGameTimeProgress / (this.GAME_CLOCK / 24);\n  }\n\n  get inGameTime() {\n    const inGameTimeDecimal = this.inGameTimeDecimal + this.GAME_OFFSET; // I think the offset is actually a factor of rounding\n    const inGameHours = Math.floor(inGameTimeDecimal)\n    const inGameMinutes = Math.round((inGameTimeDecimal % 1) * 60);\n\n    return this.renderTime(inGameHours, inGameMinutes);\n  }\n\n  run() {\n    this.inGameTimeEl.value = this.inGameTime;\n  }\n\n  start() {\n    this.run();\n    if (this.#updater === undefined) {\n      this.#updater = setInterval(this.run.bind(this), 250);\n    }\n  }\n\n  stop() {\n    clearInterval(this.#updater);\n    this.#updater = undefined;\n  }\n}\n"],"names":["GAME_CLOCK","GAME_OFFSET","constructor","igt_el_id","this","inGameTimeEl","undefined","document","getElementById","sinceMidnight","now","Date","midnight","setHours","setMinutes","setSeconds","getTime","leftPadZero","number","slice","renderTime","hours","minutes","inGameTimeProgress","inGameTimeDecimal","inGameTime","inGameHours","Math","floor","inGameMinutes","round","run","value","start","setInterval","bind","stop","clearInterval"],"sourceRoot":""}